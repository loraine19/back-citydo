generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/////// USERS GROUP ...
model GroupUser {
  userId    Int
  groupId   Int
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Group     Group    @relation(fields: [groupId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([userId, groupId])
}

model User {
  id             Int            @id @default(autoincrement())
  email          String         @unique
  password       String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  lastConnection DateTime       @default(now())
  status         UserStatus     @default(INACTIVE)
  provider       UserProvider   @default(LOCAL)
  providerId     String? // ID unique de l'utilisateur chez le fournisseur
  Token          Token[]
  GroupUser      GroupUser[]
  Event          Event[]
  Post           Post[]
  Like           Like[]
  Flag           Flag[]
  Vote           Vote[]
  Participant    Participant[]
  Survey         Survey[]
  Service        Service[]      @relation("Service")
  ServiceResp    Service[]      @relation("ServiceResp")
  IssueModo      Issue[]        @relation("Modo")
  IssueModoOn    Issue[]        @relation("ModoOn")
  Issue          Issue[]        @relation("Issue")
  Pool           Pool[]         @relation("Pool")
  Benef          Pool[]         @relation("PoolBenef")
  Profile        Profile?       @relation("Profile")
  Notifications  Notification[]
  Messages       Message[]      @relation("MessageUser")
  MessagesDest   Message[]      @relation("MessageUserRec")

  @@unique([provider, providerId])
}

enum UserProvider {
  LOCAL
  GOOGLE
}

model Group {
  id        Int         @id @default(autoincrement())
  addressId Int
  area      Int
  rules     String      @db.LongText
  name      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Address   Address     @relation(fields: [addressId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  GroupUser GroupUser[]
  Surveys   Survey[]
  Pools     Pool[]
}

model Address {
  id            Int            @id @default(autoincrement())
  zipcode       String
  city          String
  address       String
  lat           Decimal
  lng           Decimal
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Groups        Group[]
  Profiles      Profile[]
  Events        Event[]
  Notifications Notification[]

  @@unique([address, zipcode])
}

model Profile {
  userId        Int               @id @unique
  addressId     Int?
  firstName     String
  lastName      String
  image         String?
  phone         String?
  mailSub       MailSubscriptions @default(SUB_1)
  addressShared Boolean           @default(false)
  assistance    AssistanceLevel   @default(LEVEL_0)
  points        Int?              @default(10)
  skills        String?           @db.MediumText
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  Address       Address?          @relation(fields: [addressId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  User          User              @relation(fields: [userId], references: [id], name: "Profile", onUpdate: Cascade, onDelete: Cascade)
}

model Token {
  userId    Int
  token     String
  type      TokenType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiredAt DateTime?
  User      User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([userId, type])
}

/////// EVENTS 
model Event {
  id              Int           @id @default(autoincrement())
  userId          Int
  addressId       Int
  start           DateTime
  end             DateTime
  title           String
  description     String
  category        EventCategory
  participantsMin Int
  image           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  User            User          @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Address         Address       @relation(fields: [addressId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Participants    Participant[]
  Flags           Flag[]        @relation(name: "EventFlag", map: "EventFlag")
  status          EventStatus   @default(PENDING)
}

////// PARTICIPANT
model Participant {
  userId    Int
  eventId   Int
  User      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Event     Event    @relation(fields: [eventId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, eventId])
}

////// SERVICE 
model Service {
  id          Int             @id @default(autoincrement())
  userId      Int
  User        User            @relation(fields: [userId], references: [id], name: "Service", onUpdate: Cascade, onDelete: Cascade)
  userIdResp  Int?
  UserResp    User?           @relation(fields: [userIdResp], references: [id], name: "ServiceResp", onUpdate: Cascade, onDelete: Cascade)
  type        ServiceType
  title       String
  description String          @db.LongText
  category    ServiceCategory
  skill       SkillLevel      @default(LEVEL_0)
  hard        HardLevel       @default(LEVEL_0)
  status      ServiceStep     @default(STEP_0)
  image       String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  Issue       Issue[]
  Flags       Flag[]          @relation(name: "ServiceFlag", map: "ServiceFlag")
  points      Int?            @default(0)
}

////// ISSUE
model Issue {
  serviceId    Int       @id @unique
  description  String?   @db.MediumText
  date         DateTime  @default(now())
  status       IssueStep @default(STEP_0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userIdModo   Int?
  userIdModoOn Int?
  image        String?
  UserModo     User?     @relation(fields: [userIdModo], references: [id], name: "Modo", onUpdate: Cascade, onDelete: Cascade)
  UserModoOn   User?     @relation(fields: [userIdModoOn], references: [id], name: "ModoOn", onUpdate: Cascade, onDelete: Cascade)
  Service      Service   @relation(fields: [serviceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  User         User      @relation(fields: [userId], references: [id], name: "Issue", onUpdate: Cascade, onDelete: Cascade)
  userId       Int
}

///// SURVEY POOL 
model Survey {
  id          Int              @id @default(autoincrement())
  userId      Int
  title       String
  description String           @db.MediumText
  category    SurveyCategory
  image       String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  User        User             @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Votes       Vote[]           @relation(name: "SurveyVote", map: "surveyVote")
  Flags       Flag[]           @relation(name: "SurveyFlag", map: "SurveyFlag")
  status      PoolSurveyStatus @default(PENDING)
  groupId     Int
  Group       Group?           @relation(fields: [groupId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Pool {
  id          Int              @id @default(autoincrement())
  userId      Int
  userIdBenef Int
  title       String
  description String           @db.MediumText
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  User        User             @relation(fields: [userId], references: [id], name: "Pool", onUpdate: Cascade, onDelete: Cascade)
  UserBenef   User             @relation(fields: [userIdBenef], references: [id], name: "PoolBenef", onUpdate: Cascade, onDelete: Cascade)
  Votes       Vote[]           @relation(name: "PoolVote", map: "poolVote")
  status      PoolSurveyStatus @default(PENDING)
  groupId     Int
  Group       Group?           @relation(fields: [groupId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Vote {
  userId    Int
  targetId  Int
  target    VoteTarget
  opinion   VoteOpinion @default(OK)
  User      User        @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Pool      Pool?       @relation(fields: [targetId], references: [id], name: "PoolVote", map: "poolVote", onUpdate: Cascade, onDelete: Cascade)
  Survey    Survey?     @relation(fields: [targetId], references: [id], name: "SurveyVote", map: "surveyVote", onUpdate: Cascade, onDelete: Cascade)

  @@id([userId, target, targetId])
}

///// POST 
model Post {
  id          Int          @id @default(autoincrement())
  userId      Int
  title       String
  description String       @db.MediumText
  category    PostCategory
  image       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  User        User         @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Likes       Like[]
  share       Share        @default(EMAIL)
  Flags       Flag[]       @relation(name: "PostFlag", map: "PostFlag")
}

model Like {
  userId    Int
  postId    Int
  User      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Post      Post     @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  updatedAt DateTime @updatedAt

  @@id([userId, postId])
}

///// FLAG 
model Flag {
  targetId  Int
  userId    Int
  target    FlagTarget
  reason    FlagReason
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  User      User       @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Post      Post?      @relation(fields: [targetId], references: [id], onUpdate: Cascade, onDelete: Cascade, name: "PostFlag", map: "PostFlag")
  Event     Event?     @relation(fields: [targetId], references: [id], onUpdate: Cascade, onDelete: Cascade, name: "EventFlag", map: "EventFlag")
  Survey    Survey?    @relation(fields: [targetId], references: [id], onUpdate: Cascade, onDelete: Cascade, name: "SurveyFlag", map: "SurveyFlag")
  Service   Service?   @relation(fields: [targetId], references: [id], onUpdate: Cascade, onDelete: Cascade, name: "ServiceFlag", map: "ServiceFlag")

  @@id([userId, target, targetId])
}

////// NOTIFICATION
model Notification {
  id          Int               @id @default(autoincrement())
  userId      Int
  title       String
  description String            @db.MediumText
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  addressId   Int?
  type        NotificationType  @default(SYSTEM)
  link        String?
  User        User              @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Address     Address?          @relation(fields: [addressId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  read        Boolean           @default(false)
  level       NotificationLevel @default(ONLY_APP)
  /// 
  data        Json?
}

model Message {
  id        Int      @id @default(autoincrement())
  userId    Int
  userIdRec Int
  message   String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  read      Boolean  @default(false)
  User      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade, name: "MessageUser")
  UserRec   User     @relation(fields: [userIdRec], references: [id], onUpdate: Cascade, onDelete: Cascade, name: "MessageUserRec")
}

///// ENUM
enum UserStatus {
  ACTIVE
  INACTIVE
}

enum TokenType {
  REFRESH
  RESET
  VERIFY
  DELETE
  REFRESH_GOOGLE
}

enum Role {
  MEMBER
  GUEST
  MODO
}

enum ServiceType {
  GET
  DO
}

enum VoteTarget {
  SURVEY
  POOL
}

enum VoteOpinion {
  OK
  NO
  WO
}

enum FlagTarget {
  EVENT
  POST
  SURVEY
  SERVICE
}

enum FlagReason {
  REASON_1
  REASON_2
  REASON_3
  REASON_4
  REASON_5
}

enum Share {
  EMAIL
  PHONE
  EMAIL_PHONE
}

enum ServiceStep {
  STEP_0
  STEP_1
  STEP_2
  STEP_3
  STEP_4
}

enum IssueStep {
  STEP_0
  STEP_1
  STEP_2
  STEP_3
  STEP_4
  STEP_5
}

enum EventCategory {
  CATEGORY_1
  CATEGORY_2
  CATEGORY_3
  CATEGORY_4
  CATEGORY_5
}

enum PostCategory {
  CATEGORY_1
  CATEGORY_2
  CATEGORY_3
  CATEGORY_4
  CATEGORY_5
}

enum ServiceCategory {
  CATEGORY_1
  CATEGORY_2
  CATEGORY_3
  CATEGORY_4
  CATEGORY_5
}

enum SurveyCategory {
  CATEGORY_1
  CATEGORY_2
  CATEGORY_3
  CATEGORY_4
  CATEGORY_5
}

enum AssistanceLevel {
  LEVEL_0
  LEVEL_1
  LEVEL_2
  LEVEL_3
  LEVEL_4
}

enum SkillLevel {
  LEVEL_0
  LEVEL_1
  LEVEL_2
  LEVEL_3
  LEVEL_4
}

enum HardLevel {
  LEVEL_0
  LEVEL_1
  LEVEL_2
  LEVEL_3
  LEVEL_4
}

enum MailSubscriptions {
  SUB_1
  SUB_2
  SUB_3
  SUB_4
}

enum NotificationType {
  EVENT
  POST
  SURVEY
  SERVICE
  POOL
  ISSUE
  SYSTEM
  PARTICIPANT
  FLAG
  LIKE
  VOTE
  MESSAGE
}

enum NotificationLevel {
  SUB_1
  SUB_2
  SUB_3
  SUB_4
  ONLY_APP
}

enum PoolSurveyStatus {
  PENDING
  VALIDATED
  REJECTED
}

enum EventStatus {
  PENDING
  VALIDATED
  REJECTED
}
